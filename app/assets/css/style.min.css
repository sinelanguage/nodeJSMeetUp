/*!
 * fireshell
 * Fiercely quick and opinionated front-ends
 * http://getfireshell.com
 * @author Todd Motto
 * @version 1.1.0
 * Copyright 2013. MIT licensed.
 */

@charset "UTF-8";

.clear:before,
.clear:after {
  content: ' ';
  display: table;
}

.clear {
  *zoom: 1;
}

.clear:after {
  clear: both;
}

* {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

html {
  font-size: 62.5%;
}

body {
  font: 300 13px/1.6 'Helvetica Neue', Helvetica, Arial;
  background: #fff;
  color: #444;
}

.logo {
  margin: -100px 0 0 -84px;
  position: absolute;
  top: 50%;
  left: 50%;
}

.nav ul {
  list-style: none;
}

@font-face {
  font-family: 'Font-Name';
  src: url("../fonts/font-name.eot");
  src: url("../fonts/font-name.eot?#iefix") format("embedded-opentype"), url("../fonts/font-name.woff") format("woff"), url("../fonts/font-name.ttf") format("truetype"), url("../fonts/font-name.svg#font-name") format("svg");
  font-weight: normal;
  font-style: normal;
}

/* FLEXBOX

        .container {

                display: flex | inline-flex
                flex-direction: row | row-reverse | column | column-reverse;
                flex-wrap: nowrap | wrap | wrap-reverse;
                flex-flow: <‘flex-direction’> || <‘flex-wrap’>
                justify-content: flex-start | flex-end | center | space-between | space-around;
                align-items: flex-start | flex-end | center | baseline | stretch;

        }

        .flex-container {

                * We first create a flex layout context *
                display: flex;

                * Then we define the flow direction and if we allow the items to wrap
                * Remember this is the same as:
                * flex-direction: row;
                * flex-wrap: wrap;

                flex-flow: row wrap;

                * Then we define how is distributed the remaining space *
                justify-content: space-around;


                .item {

                        order: <integer>;
                        flex-grow: <number>; default 0
                        flex-shrink: <number>; default 1
                        flex-basis: <length> | auto; default auto

                        flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
                        align-self: auto | flex-start | flex-end | center | baseline | stretch;


                }

        }

*/

body {
  color: black;
  font: 400 16px/1.0 "opensans", sans-serif;
}

/*# sourceMappingURL=style.unprefixed.css.map */